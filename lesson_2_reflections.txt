Q- What happens when you initialize a repository? Why do you need to do it?

A- A .git folder in the directory that git init is run. It is needed in order to create a starting point for the repository.


Q- How is the staging area different from the working directory and the repository? What value do you think it offers?

A- The staging area is virtual in the sense that it only exists between the time files are untracked and when they are committed. Allows for new content to be grouped logically for commits.


Q- How can you use the staging area to make sure you have one commit per logical change?

A- You do this by adding only files/changes that are related to a logical change

Q- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A- When adding a new experimental feature
   When a different version of the software is needed along side the original version of the software
Branches help by keeping commits for the purpose of the branches isolated from the main branch thereby keeping illogical changes to the master away from the master.


Q- How do the diagrams help you visualize the branch structure?

A- It allows me to easily see where two branches "branched" off.


Q- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A- The result is that the changes in one branch are merged into the other. We represent it in the diagram the way we do to show that the new "master" is a result of a merge and contains the commits of the two branches.


Q- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A- Pros(Git)/Cons(Manual):
	Saves time/ Time consuming
   Cons:
	Potential for conflicts/ easier to avoid conflicts
